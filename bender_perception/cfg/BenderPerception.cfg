#!/usr/bin/env python
PACKAGE = "bender_perception"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("scale", double_t, 0,
    "Apply this scaling factor to image before processing to speed up computation", 1.0, 0.1, 1.0)
gen.add("blur_intensity", int_t, 0,
    "Blur intensity", 0, 0, 20)
gen.add("laser_dist_scale_x", double_t, 0,
    "Meters per pixel, used for converting BEV to laser", 1.0, 0.01, 100.0)
gen.add("laser_dist_scale_y", double_t, 0,
    "Meters per pixel, used for converting BEV to laser", 1.0, 0.01, 100.0)
gen.add("laser_dist_offset", double_t, 0,
    "Horizontal offset between camera sensor and bottom of FOV", 0.0, 0.0, 5.0)
gen.add("gamma", double_t, 0, 
    "Gamma correction factor", 5.0, 0, 100)
gen.add("num_colors", int_t, 0,
    "Number of colors to quantize to (via K-means)", 2, 1, 16)
gen.add("smooth_kernel_size", int_t, 0,
    "Kernel size for applying smoothing filter", 5, 0, 30)
gen.add("roi_from_top", int_t, 0,
    "Number of pixels from top of image to exclude from ROI", 160, 0, 240)
gen.add("roi_from_bot", int_t, 0,
    "Number of pixels from bottom of image to exclude from ROI", 60, 0, 240)
gen.add("color1_thresh_lb", int_t, 0,
    "Color threshold lower bound - 1st channel", 0, 0, 255)
gen.add("color1_thresh_ub", int_t, 0,
    "Color threshold upper bound - 1st channel", 255, 0, 255)
gen.add("color2_thresh_lb", int_t, 0,
    "Color threshold lower bound - 2nd channel", 0, 0, 255)
gen.add("color2_thresh_ub", int_t, 0,
    "Color threshold upper bound - 2nd channel", 255, 0, 255)
gen.add("color3_thresh_lb", int_t, 0,
    "Color threshold lower bound - 3rd channel", 0, 0, 255)
gen.add("color3_thresh_ub", int_t, 0,
    "Color threshold upper bound - 3rd channel", 255, 0, 255)
gen.add("projection_distance", double_t, 0,
    "The dist variable when calculating homography", 0.6, 0.001, 3.0)

gen.add("threshold_adaptive", bool_t, 0, "If true, use cv.adaptiveThreshold() to binarize image; otherwise, use cv.threshold()",  True)
gen.add("threshold_lock", bool_t, 0, "When using cv.threshold() (threshold_adaptive=false), lock the threshold value to prevent auto calculation (e.g., using Otsu) ",  False)

adaptiveThreshold_method_enum = gen.enum([ 
    gen.const("ADAPTIVE_THRESH_MEAN_C", int_t, 0, "ADAPTIVE_THRESH_MEAN_C"),
    gen.const("ADAPTIVE_THRESH_GAUSSIAN_C", int_t, 1, "ADAPTIVE_THRESH_GAUSSIAN_C"),
], "An enum to set threshold method in adaptive threshold algorithm")
gen.add("adaptive_threshold_method", int_t, 0, "adaptiveMethod", 0, 0, 1, edit_method=adaptiveThreshold_method_enum)
gen.add("adaptive_threshold_block_size", int_t, 0,
    "Size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, and so on", 11, 1, 27)
gen.add("adaptive_threshold_mean_subtract", double_t, 0,
    "Constant subtracted from the mean or weighted mean (see the details below). Normally, it is positive but may be zero or negative as well", 2.0, -255, 255)

threshold_type_enum = gen.enum([ 
    gen.const("THRESH_BINARY", int_t, 0, "THRESH_BINARY"),
    gen.const("THRESH_BINARY_THRESH_OTSU", int_t, 8, "THRESH_BINARY | THRESH_OTSU"),
    gen.const("THRESH_BINARY_THRESH_TRIANGLE", int_t, 16, "THRESH_BINARY | THRESH_TRIANGLE"),
    gen.const("THRESH_BINARY_INV", int_t, 1, "THRESH_BINARY_INV"),
    gen.const("THRESH_BINARY_INV_THRESH_OTSU", int_t, 9, "THRESH_BINARY_INV | THRESH_OTSU"),
    gen.const("THRESH_BINARY_INV_THRESH_TRIANGLE", int_t, 17, "THRESH_BINARY_INV | THRESH_TRIANGLE"),
], "An enum to set threshold type in cv.threshold() algorithm")
gen.add("threshold_type", int_t, 0, "thresholdType", 0, 0, 17, edit_method=threshold_type_enum)

cvtColor_enum = gen.enum([ 
    gen.const("COLOR_BGR2HSV", int_t, 40, "COLOR_BGR2HSV"),
    gen.const("COLOR_BGR2Lab", int_t, 44, "COLOR_BGR2Lab"),
    gen.const("COLOR_BGR2HLS", int_t, 52, "COLOR_BGR2HLS"),
    gen.const("COLOR_BGR2YUV", int_t, 82, "COLOR_BGR2YUV"),
], "An enum to set color conversion type")
gen.add("color_conversion", int_t, 0, "Color conversion type", 40, 0, 143, edit_method=cvtColor_enum)

gen.add("dilation_size", int_t, 0,
    "Dilation element size", 4, 0, 32)
gen.add("erosion_size", int_t, 0,
    "Erosion element size", 4, 0, 32)

exit(gen.generate(PACKAGE, "bender_perception", "BenderPerception"))
